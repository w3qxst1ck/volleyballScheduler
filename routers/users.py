from datetime import datetime

from aiogram import Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from routers.middlewares import CheckPrivateMessageMiddleware
from routers import keyboards as kb, messages as ms
from routers.fsm_states import RegisterUserFSM
from database import schemas
from database.orm import AsyncOrm
from routers import utils

router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())
router.callback_query.middleware.register(CheckPrivateMessageMiddleware())


# REGISTRATION
@router.message(Command("start"))
@router.message(Command("menu"))
async def start_handler(message: types.Message, state: FSMContext) -> None:
    """Start message, –Ω–∞—á–∞–ª–æ RegisterUserFsm"""
    tg_id = str(message.from_user.id)
    user = await AsyncOrm.get_user_by_tg_id(tg_id)

    # —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user:
        # /start handler
        if message.text == "/start":
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

        # /menu handler
        else:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())

    # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    else:
        await state.set_state(RegisterUserFSM.name)
        msg = await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ–∏ <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
                                   reply_markup=kb.cancel_keyboard().as_markup())
        await state.update_data(prev_mess=msg)


@router.message(RegisterUserFSM.name)
async def add_user_handler(message: types.Message, state: FSMContext) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    fullname = message.text

    try:
        # validation
        firstname, lastname = await utils.get_firstname_lastname(fullname)
        tg_id = str(message.from_user.id)
        username = message.from_user.username if message.from_user.username else ""

        user = schemas.UserAdd(
            tg_id=tg_id,
            username=username,
            firstname=firstname,
            lastname=lastname
        )
        await AsyncOrm.add_user(user)

        data = await state.get_data()
        try:
            await data["prev_mess"].delete()
        except TelegramBadRequest:
            pass
        await state.clear()

        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ")
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())

    # –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    except utils.FullnameException:
        msg = await message.answer(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b> –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Å–∏–º–≤–æ–ª–æ–≤ "
            "–∏ —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
            reply_markup=kb.cancel_keyboard().as_markup()
        )

        data = await state.get_data()
        try:
            await data["prev_mess"].delete()
        except TelegramBadRequest:
            pass

        await state.update_data(prev_mess=msg)


@router.callback_query(lambda callback: callback.data.split("_")[1] == "user-menu")
async def back_menu_handler(callback: types.CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.menu_users_keyboard().as_markup())


# USER EVENTS
@router.callback_query(lambda callback: callback.data == "menu_events")
async def user_events_dates_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –¥–∞—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    # events = await AsyncOrm.get_events_with_users(only_active=True)

    events = await AsyncOrm.get_events(only_active=True)
    events_dates = [event.date for event in events]
    unique_dates = utils.get_unique_dates(events_dates)

    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º:" \
          # "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–º–µ—á–µ–Ω—ã '‚úîÔ∏è'"
    if not events:
        msg = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"

    await callback.message.edit_text(msg, reply_markup=kb.dates_keyboard(unique_dates).as_markup())


@router.callback_query(lambda callback: callback.data.split("_")[0] == "events-date")
async def user_events_dates_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%d.%m.%Y").date()

    events = await AsyncOrm.get_events_for_date(date, only_active=True)
    print(events)


@router.callback_query(lambda callback: callback.data.split("_")[0] == "user-event")
async def user_event_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ 'Events'"""
    event_id = int(callback.data.split("_")[1])
    user = await AsyncOrm.get_user_by_tg_id(str(callback.from_user.id))
    event_with_users = await AsyncOrm.get_event_with_users(event_id)

    # –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if user in event_with_users.users_registered:
        registered = True
    # –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    else:
        registered = False

    msg = ms.event_card_message(event_with_users, registered)

    await callback.message.edit_text(
        msg,
        reply_markup=kb.event_card_keyboard(event_id, user.id, registered, "menu_events", "events").as_markup()
    )


# USER ALREADY REGISTERED EVENTS
@router.callback_query(lambda callback: callback.data.split("_")[1] == "my-events")
async def user_event_registered_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    user_with_events = await AsyncOrm.get_user_with_events(str(callback.from_user.id), only_active=True)

    if not user_with_events.events:
        msg = "–í—ã –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ \n\"üóìÔ∏è –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\""
    else:
        msg = "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"

    await callback.message.edit_text(msg, reply_markup=kb.user_events(user_with_events.events).as_markup())


@router.callback_query(lambda callback: callback.data.split("_")[0] == "my-events")
async def event_info_handler(callback: types.CallbackQuery) -> None:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    event_id = int(callback.data.split("_")[1])
    event = await AsyncOrm.get_event_with_users(event_id)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏
    user = await AsyncOrm.get_user_by_tg_id(str(callback.from_user.id))

    if user in event.users_registered:
        registered = True
    else:
        registered = False

    msg = ms.event_card_message(event, registered)

    await callback.message.edit_text(
        msg,
        reply_markup=kb.event_card_keyboard(event_id, user.id, registered, "menu_my-events", "my-events").as_markup()
    )


@router.callback_query(lambda callback: callback.data.split("_")[0] in ["unreg-user", "reg-user"])
async def reg_unreg_user_to_event_handler(callback: types.CallbackQuery) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
    action = callback.data.split("_")[0]
    event_id = int(callback.data.split("_")[1])
    user_id = int(callback.data.split("_")[2])
    from_ = callback.data.split("_")[3]

    if action == "reg-user":
        await AsyncOrm.add_user_to_event(event_id, user_id)
        registered_status = True
        await callback.message.edit_text("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    else:
        await AsyncOrm.delete_user_from_event(event_id, user_id)
        registered_status = False
        await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    event = await AsyncOrm.get_event_with_users(event_id)

    # –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if from_ == "events":
        await callback.message.answer(
            ms.event_card_message(event, user_registered=registered_status),
            reply_markup=kb.event_card_keyboard(
                event_id, user_id, registered_status, "menu_events", "events"
            ).as_markup()
        )

    # –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    else:
        await callback.message.answer(
            ms.event_card_message(event, user_registered=registered_status),
            reply_markup=kb.event_card_keyboard(
                event_id, user_id, registered_status, "menu_my-events", "my-events"
            ).as_markup()
        )


# USER PROFILE
@router.callback_query(lambda callback: callback.data == "menu_profile")
async def main_menu_handler(callback: types.CallbackQuery) -> None:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await AsyncOrm.get_user_by_tg_id(str(callback.from_user.id))

    message = ms.user_profile_message(user)
    await callback.message.edit_text(message, reply_markup=kb.user_profile_keyboard().as_markup())


# CANCEL BUTTON
@router.callback_query(lambda callback: callback.data == "button_cancel", StateFilter("*"))
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """Cancel FSM and delete last message"""
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass