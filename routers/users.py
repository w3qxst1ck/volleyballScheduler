from datetime import datetime

from aiogram import Router, types, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from routers.middlewares import CheckPrivateMessageMiddleware
from routers import keyboards as kb, messages as ms
from routers.fsm_states import RegisterUserFSM, UpdateUserFSM
from database import schemas
from database.orm import AsyncOrm
from routers import utils
import settings

router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())
router.callback_query.middleware.register(CheckPrivateMessageMiddleware())


# REGISTRATION
@router.message(Command("start"))
@router.message(Command("menu"))
async def start_handler(message: types.Message, state: FSMContext) -> None:
    """Start message, –Ω–∞—á–∞–ª–æ RegisterUserFsm"""
    tg_id = str(message.from_user.id)
    user = await AsyncOrm.get_user_by_tg_id(tg_id)

    # —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user:
        # /start handler
        if message.text == "/start":
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

        # /menu handler
        else:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())

    # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    else:
        await state.set_state(RegisterUserFSM.name)
        msg = await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ–∏ <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
                                   reply_markup=kb.cancel_keyboard().as_markup())
        await state.update_data(prev_mess=msg)


@router.message(RegisterUserFSM.name)
async def add_user_handler(message: types.Message, state: FSMContext) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    fullname = message.text

    try:
        # validation
        firstname, lastname = await utils.get_firstname_lastname(fullname)
        tg_id = str(message.from_user.id)
        username = message.from_user.username if message.from_user.username else ""

        user = schemas.UserAdd(
            tg_id=tg_id,
            username=username,
            firstname=firstname,
            lastname=lastname
        )
        await AsyncOrm.add_user(user)

        data = await state.get_data()
        try:
            await data["prev_mess"].delete()
        except TelegramBadRequest:
            pass
        await state.clear()

        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ")
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())

    # –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    except utils.FullnameException:
        msg = await message.answer(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b> –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Å–∏–º–≤–æ–ª–æ–≤ "
            "–∏ —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
            reply_markup=kb.cancel_keyboard().as_markup()
        )

        data = await state.get_data()
        try:
            await data["prev_mess"].delete()
        except TelegramBadRequest:
            pass

        await state.update_data(prev_mess=msg)


@router.callback_query(lambda callback: callback.data.split("_")[1] == "user-menu")
async def back_menu_handler(callback: types.CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if type(callback) == types.Message:
        await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())

    else:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())


# ALL EVENTS
@router.callback_query(lambda callback: callback.data.split("_")[1] == "all-events")
async def user_events_dates_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –¥–∞—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    events = await AsyncOrm.get_events(only_active=True, days_ahead=11) # –±–µ—Ä–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö 10 –¥–Ω–µ–π
    events_dates = [event.date for event in events]
    unique_dates = utils.get_unique_dates(events_dates)

    msg = "–î–∞—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:"
    if not events:
        msg = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"

    await callback.message.edit_text(msg, reply_markup=kb.dates_keyboard(unique_dates).as_markup())


@router.callback_query(lambda callback: callback.data.split("_")[0] == "events-date")
async def user_events_dates_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%d.%m.%Y").date()

    user = await AsyncOrm.get_user_by_tg_id(str(callback.from_user.id))
    events = await AsyncOrm.get_events_for_date(date)

    await callback.message.edit_text(
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ <b>{date_str}</b>:\n\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã, –ø–æ–º–µ—á–µ–Ω—ã '‚úîÔ∏è'",
        reply_markup=kb.events_keyboard(events, user).as_markup()
    )


@router.callback_query(lambda callback: callback.data.split("_")[0] == "user-event")
async def user_event_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    event_id = int(callback.data.split("_")[1])
    user_tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(user_tg_id)
    event_with_users = await AsyncOrm.get_event_with_users(event_id)

    payment = await AsyncOrm.get_payment_by_event_and_user(event_id, user.id)

    msg = ms.event_card_for_user_message(event_with_users, payment)

    await callback.message.edit_text(
        msg,
        reply_markup=kb.event_card_keyboard(
            event_id,
            user.id,
            payment,
            f"events-date_{utils.convert_date(event_with_users.date)}",
        ).as_markup()
    )


@router.callback_query(lambda callback: callback.data.split("_")[0] == "reg-user")
async def register_user_on_event(callback: types.CallbackQuery) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[1])
    user_id = int(callback.data.split("_")[2])

    event_with_users = await AsyncOrm.get_event_with_users(event_id)
    user = await AsyncOrm.get_user_by_id(user_id)

    # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
    if not user.level or user.level >= event_with_users.level:
        # –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
        if len(event_with_users.users_registered) >= event_with_users.places:
            payment = await AsyncOrm.get_payment_by_event_and_user(event_id, user.id)
            msg = ms.event_card_for_user_message(event_with_users, payment)
            await callback.message.edit_text("‚ùó–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, "
                                             "—Ç–∞–∫ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç")
            await callback.message.answer(msg, reply_markup=kb.event_card_keyboard(event_id, user.id, payment,
                f"events-date_{utils.convert_date(event_with_users.date)}").as_markup())

        # –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –µ—Å—Ç—å
        else:
            msg = ms.invoice_message_for_user(event_with_users)
            await callback.message.edit_text(msg, reply_markup=kb.payment_confirm_keyboard(user, event_with_users).as_markup())

    # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ
    else:
        payment = await AsyncOrm.get_payment_by_event_and_user(event_id, user.id)
        msg = ms.event_card_for_user_message(event_with_users, payment)
        await callback.message.edit_text("‚ùó–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, "
                                         "—Ç–∞–∫ –∫–∞–∫ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ")
        await callback.message.answer(
            msg,
            reply_markup=kb.event_card_keyboard(
                event_id,
                user.id,
                payment,
                f"events-date_{utils.convert_date(event_with_users.date)}"
            ).as_markup()
        )


@router.callback_query(lambda callback: callback.data.split("_")[0] == "paid")
async def register_paid_event(callback: types.CallbackQuery, bot: Bot) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[1])
    event_id = int(callback.data.split("_")[2])

    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
    await AsyncOrm.create_payments(user_id, event_id)

    # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await AsyncOrm.get_user_by_id(user_id)
    event = await AsyncOrm.get_event_by_id(event_id)

    event_date = utils.convert_date(event.date)
    event_time = utils.convert_time(event.date)

    msg_to_admin = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> " \
                   f"–æ–ø–ª–∞—Ç–∏–ª <b>{event.type}</b> \"{event.title}\" <b>{event_date} {event_time}</b> " \
                   f"–Ω–∞ —Å—É–º–º—É <b>{event.price} —Ä—É–±.</b> \n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É"
    await bot.send_message(
        settings.settings.main_admin_tg_id,
        msg_to_admin,
        reply_markup=kb.confirm_decline_keyboard(event_id, user_id).as_markup()
    )

    await callback.message.edit_text(f"üîî <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</i>\n\n"
                                     f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É <b>{event.price}</b> —Ä—É–±. –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    msg = "–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" \
          "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ \"üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" –≤ —Ä–∞–∑–¥–µ–ª–µ \"üèê –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\""

    await callback.message.answer(msg)
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu_users_keyboard().as_markup())


# USER ALREADY REGISTERED EVENTS
@router.callback_query(lambda callback: callback.data.split("_")[1] == "my-events")
async def user_event_registered_handler(callback: types.CallbackQuery) -> None:
    """–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    payments = await AsyncOrm.get_user_payments_with_events_and_users(str(callback.from_user.id))
    active_events = list(filter(lambda payment: payment.event.active == True, payments))

    if not active_events:
        msg = "–í—ã –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ \n\"üóìÔ∏è –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\""
    else:
        msg = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫—É–¥–∞ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å:\n\n‚úÖ - –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚è≥ - –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

    await callback.message.edit_text(msg, reply_markup=kb.user_events(active_events).as_markup())


@router.callback_query(lambda callback: callback.data.split("_")[0] == "my-events")
async def my_event_info_handler(callback: types.CallbackQuery) -> None:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –ú–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    payment_id = int(callback.data.split("_")[1])

    payment = await AsyncOrm.get_payment_by_id(payment_id)
    event = await AsyncOrm.get_event_with_users(payment.event_id)

    msg = ms.event_card_for_user_message(event, payment)

    await callback.message.edit_text(msg, reply_markup=kb.my_event_card_keyboard(payment).as_markup())


@router.callback_query(lambda callback: callback.data.split("_")[0] == "unreg-user")
async def unregister_form_my_event_handler(callback: types.CallbackQuery) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤ –ú–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    event_id = int(callback.data.split("_")[1])
    user_id = int(callback.data.split("_")[2])

    event = await AsyncOrm.get_event_by_id(event_id)
    payment = await AsyncOrm.get_payment_by_event_and_user(event_id, user_id)

    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{event.type} \"{event.title}\"</b>?",
        reply_markup=kb.yes_no_keyboard_for_unreg_from_event(event_id, user_id, payment.id).as_markup()
    )


@router.callback_query(lambda callback: callback.data.split("_")[0] == "unreg-user-confirmed")
async def unregister_form_my_event_handler(callback: types.CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤ –ú–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    event_id = int(callback.data.split("_")[1])
    user_id = int(callback.data.split("_")[2])

    await AsyncOrm.delete_user_from_event(event_id, user_id)
    await AsyncOrm.delete_payment(event_id, user_id)

    event = await AsyncOrm.get_event_by_id(event_id)
    await callback.message.edit_text(f"üîî <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</i>\n\n"
                                     f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{event.type} \"{event.title}\"</b>")

    # –≤–æ–∑–≤—Ä–∞—Ç –∫–æ –≤–∫–ª–∞–¥–∫–µ –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    events = await AsyncOrm.get_user_payments_with_events_and_users(str(callback.from_user.id))

    if not events:
        msg = "–í—ã –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ \n\"üóìÔ∏è –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\""
    else:
        msg = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫—É–¥–∞ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å:\n\n‚úÖ - –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n‚è≥ - –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

    await callback.message.answer(msg, reply_markup=kb.user_events(events).as_markup())


# USER PROFILE
@router.callback_query(lambda callback: callback.data == "menu_profile")
async def main_menu_handler(callback: types.CallbackQuery) -> None:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await AsyncOrm.get_user_by_tg_id(str(callback.from_user.id))

    message = ms.user_profile_message(user)
    await callback.message.edit_text(message, reply_markup=kb.user_profile_keyboard().as_markup())


@router.callback_query(lambda callback: callback.data == "update_user_profile")
async def update_user_profile(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤–∫–ª–∞–¥–∫–µ –ü—Ä–æ—Ñ–∏–ª—å"""

    await state.set_state(UpdateUserFSM.name)
    msg = await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ–∏ <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
        reply_markup=kb.cancel_keyboard().as_markup()
    )

    await state.update_data(prev_mess=msg)


@router.message(UpdateUserFSM.name)
async def update_user_handler(message: types.Message, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤–∫–ª–∞–¥–∫–µ –ü—Ä–æ—Ñ–∏–ª—å"""

    fullname = message.text

    try:
        # validation
        firstname, lastname = await utils.get_firstname_lastname(fullname)
        tg_id = str(message.from_user.id)

        await AsyncOrm.update_user(tg_id, firstname, lastname)

        data = await state.get_data()

        try:
            await data["prev_mess"].delete()
        except TelegramBadRequest:
            pass

        await state.clear()

        user = await AsyncOrm.get_user_by_tg_id(tg_id)

        await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ")

        msg = ms.user_profile_message(user)
        await message.answer(msg, reply_markup=kb.user_profile_keyboard().as_markup())

    # –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    except utils.FullnameException:
        msg = await message.answer(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b> –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Å–∏–º–≤–æ–ª–æ–≤ "
            "–∏ —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
            reply_markup=kb.cancel_keyboard().as_markup()
        )

        data = await state.get_data()
        try:
            await data["prev_mess"].delete()
        except TelegramBadRequest:
            pass

        await state.update_data(prev_mess=msg)


# HELP
@router.message(Command("help"))
async def help_handler(message: types.Message) -> None:
    """Help message"""
    msg = ms.get_help_message()
    await message.answer(msg)


# CANCEL BUTTON
@router.callback_query(lambda callback: callback.data == "button_cancel", StateFilter("*"))
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """Cancel FSM and delete last message"""
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass