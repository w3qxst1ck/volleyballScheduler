import datetime

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from functools import wraps
from typing import Callable, List

from database.schemas import Event, User, EventRel, PaymentsEventsUsers, Payment, ReservedEvent, Tournament, \
    TeamUsers, TournamentTeams, TournamentPayment, TournamentPaid
from routers.utils import convert_date, convert_time, get_weekday_from_date
from settings import settings


def back_button(callback_data: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    def wrapper(func: Callable):
        @wraps(func)
        def inner(*args, **kwargs):
            result = func(*args, **kwargs)
            result.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"back_{callback_data}"))
            return result
        return inner
    return wrapper


# USERS KEYBOARDS
def menu_users_keyboard() -> InlineKeyboardBuilder:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üóìÔ∏è –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data=f"menu_all-events"))
    keyboard.row(InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"menu_profile"))
    keyboard.row(InlineKeyboardButton(text="üèê –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data=f"menu_my-events"))

    keyboard.adjust(2)
    return keyboard


@back_button("all-events")
def events_keyboard(events: list[EventRel | Tournament],
                    user: User,
                    reserved_events: List[ReservedEvent],
                    ) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    keyboard = InlineKeyboardBuilder()

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    sorted_events = sorted(events, key=lambda e: e.date)

    for event in sorted_events:

        # –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if type(event) == TournamentTeams:
            # –¥–µ–ª–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö
            main_users_id = []
            reserve_users_id = []
            for team in event.teams:
                for team_user in team.users:
                    if team.reserve:
                        reserve_users_id.append(team_user.id)
                    else:
                        main_users_id.append(team_user.id)

            if user.id in main_users_id:
                registered = "‚úÖÔ∏è "

            elif user.id in reserve_users_id:
                registered = "üìù "

            else:
                registered = ""

            time = event.date.time().strftime("%H:%M")

            keyboard.row(InlineKeyboardButton(text=f"{registered}{time} üèÜ {event.type}",
                                              callback_data=f"user-tournament_{event.id}"))

        # –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∫—Ä–æ–º–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        elif type(event) == EventRel:
            time = event.date.time().strftime("%H:%M")

            registered = ""
            if user in event.users_registered:
                registered = "‚úÖÔ∏è" + " "

            reserved = ""
            if event.id in [reserve.event.id for reserve in reserved_events]:
                reserved = "üìù" + " "

            keyboard.row(InlineKeyboardButton(text=f"{registered}{reserved}{time} {event.type}",
                                              callback_data=f"user-event_{event.id}"))

    keyboard.adjust(1)
    return keyboard


@back_button("user-menu")
def dates_keyboard(dates: dict[str:int]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞—Ç–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    keyboard = InlineKeyboardBuilder()

    for key in dates.keys():
        weekday = get_weekday_from_date(key)
        count = dates[key]
        if count == 1:
            events = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        elif count in [2, 3, 4]:
            events = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        else:
            events = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"

        keyboard.row(

            InlineKeyboardButton(text=f"{key} {weekday} ({count} {events})", callback_data=f"events-date_{key}"))

    keyboard.adjust(1)
    return keyboard


@back_button("user-menu")
def user_profile_keyboard(has_gender: bool) -> InlineKeyboardBuilder:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"update_user_profile")
    )
    if not has_gender:
        keyboard.row(
            InlineKeyboardButton(text="üë• –£–∫–∞–∑–∞—Ç—å –ø–æ–ª", callback_data=f"choose_gender")
        )
    return keyboard


def choose_gender_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data=f"update_gender|male"))
    keyboard.row(InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data=f"update_gender|female"))
    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"menu_profile"))

    return keyboard


def confirm_choose_gender_keyboard(gender: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_update_gender|{gender}"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"choose_gender")
    )

    return keyboard


@back_button("user-menu")
def user_events(events: list[PaymentsEventsUsers | Tournament],
                reserved_events: list[ReservedEvent]) -> InlineKeyboardBuilder:
    """–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    keyboard = InlineKeyboardBuilder()
    reserved_events_ids = [reserve.event.id for reserve in reserved_events]

    for event in events:
        # –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if type(event) == Tournament:
            date = convert_date(event.date)
            weekday = settings.weekdays[datetime.datetime.weekday(event.date)]

            keyboard.row(InlineKeyboardButton(
                text=f"üèÜ {date} ({weekday}) {event.type}",
                callback_data=f"my-tournament_{event.id}")
            )

        # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        else:
            date = convert_date(event.event.date)
            weekday = settings.weekdays[datetime.datetime.weekday(event.event.date)]

            if event.event.id in reserved_events_ids:
                status = "üìù"
            elif event.paid_confirm:
                status = "‚úÖÔ∏è"
            else:
                status = "‚è≥"

            keyboard.row(InlineKeyboardButton(
                text=f"{status} {date} ({weekday}) {event.event.type}",
                callback_data=f"my-events_{event.id}")
            )

    keyboard.adjust(1)
    return keyboard


def my_event_card_keyboard(payment: Payment, reserved_event: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –º–æ–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    keyboard = InlineKeyboardBuilder()

    # –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if payment.paid_confirm:
        if reserved_event:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ä–µ–∑–µ—Ä–≤",
                    callback_data=f"unreg-user-reserve_{payment.event_id}_{payment.user_id}"))
        else:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                    callback_data=f"unreg-user_{payment.event_id}_{payment.user_id}"
                )
            )

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"menu_my-events"))

    return keyboard


def tournament_card_keyboard(tournament: Tournament, user_id: int, back_to: str, main_teams: list[TeamUsers],
                             reserve_teams: List[TeamUsers], wrong_level: bool = False) -> InlineKeyboardBuilder:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç"""
    keyboard = InlineKeyboardBuilder()
    user_already_has_team: bool = False

    # –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if main_teams:
        for team in main_teams:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            registered = ""
            registered_users = [user.id for user in team.users]
            if user_id in registered_users:
                registered = "‚úÖÔ∏è "
                user_already_has_team = True

            if back_to == "menu_my-events":
                keyboard.row(InlineKeyboardButton(text=f"{registered}{team.title}", callback_data=f"register-in-team_{team.team_id}_{tournament.id}_me"))
            else:
                keyboard.row(InlineKeyboardButton(text=f"{registered}{team.title}", callback_data=f"register-in-team_{team.team_id}_{tournament.id}_mm"))

    # –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if reserve_teams:
        for team in reserve_teams:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            registered = ""
            registered_users = [user.id for user in team.users]
            if user_id in registered_users:
                registered = "‚úÖÔ∏è "
                user_already_has_team = True

            keyboard.row(InlineKeyboardButton(text=f"{registered}{team.title} (—Ä–µ–∑–µ—Ä–≤)", callback_data=f"register-in-team_{team.team_id}_{tournament.id}"))

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
    if not user_already_has_team:
        # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è
        if not wrong_level:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥
            if len(main_teams) < tournament.max_team_count:
                keyboard.row(InlineKeyboardButton(text=f"‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"register-new-team_{tournament.id}"))
            else:
                keyboard.row(InlineKeyboardButton(text=f"üìù –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ä–µ–∑–µ—Ä–≤", callback_data=f"register-reserve-team_{tournament.id}"))
    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))

    return keyboard


def event_card_keyboard(event_id: int,
                        user_id: int,
                        payment: Payment | None,
                        back_to: str,
                        full_event: bool) -> InlineKeyboardBuilder:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    keyboard = InlineKeyboardBuilder()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
    if not payment:
        # –µ—Å–ª–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
        if full_event:
            keyboard.row(InlineKeyboardButton(text=f"üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤", callback_data=f"reg-user-reserve_{event_id}_{user_id}"))
        # —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –µ—Å—Ç—å
        else:
            keyboard.row(InlineKeyboardButton(text=f"‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"reg-user_{event_id}_{user_id}"))

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))
    return keyboard


def yes_no_keyboard_for_unreg_from_event(event_id: int, user_id: int, payment_id: int, reserved_event: bool = False) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–æ–±—ã—Ç–∏—è –≤ –ú–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    keyboard = InlineKeyboardBuilder()

    if reserved_event:
        keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"unreg-user-confirmed-reserve_{event_id}_{user_id}"))
    else:
        keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"unreg-user-confirmed_{event_id}_{user_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"my-events_{payment_id}"))
    keyboard.adjust(2)

    return keyboard


# PAYMENTS
def payment_confirm_keyboard(user: User, event: Event, to_reserve: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardBuilder()
    if to_reserve:
        keyboard.row(InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid-reserve_{user.id}_{event.id}"
        ))
    else:
        keyboard.row(
            InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{user.id}_{event.id}")
        )

    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"user-event_{event.id}"))

    return keyboard


def payment_tournament_confirm_keyboard(team_id: int, tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"t-paid_{team_id}_{tournament_id}")
    )

    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"register-in-team_{team_id}_{tournament_id}_mm"))

    return keyboard


def main_keyboard_or_my_events() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –≤ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"back_user-menu"),
        InlineKeyboardButton(
            text="üèê –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"menu_my-events"),
    )

    keyboard.adjust(2)

    return keyboard


def confirm_decline_keyboard(event_id: int, user_id: int, to_reserve: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º"""
    keyboard = InlineKeyboardBuilder()
    if to_reserve:
        keyboard.row(
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"admin-payment-reserve_ok_{event_id}_{user_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"admin-payment-reserve_cancel_{event_id}_{user_id}"),
        )
    else:
        keyboard.row(
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"admin-payment_ok_{event_id}_{user_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"admin-payment_cancel_{event_id}_{user_id}"), )
    return keyboard


def admin_confirm_tournament_payment_keyboard(team_id: int, tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"tournament-payment_ok_{team_id}_{tournament_id}"),
        InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"tournament-payment_cancel_{team_id}_{tournament_id}"),
    )
    return keyboard


# ADMIN KEYBOARDS
def events_keyboard_admin(events: list[Event | Tournament]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω—É"""
    keyboard = InlineKeyboardBuilder()

    for event in events:
        date = convert_date(event.date)
        time = convert_time(event.date)

        # —Ç—É—Ä–Ω–∏—Ä
        if type(event) == Tournament:
            keyboard.row(InlineKeyboardButton(text=f"üèÜ {date} {time} {event.type}", callback_data=f"admin-tournament_{event.id}"))
        # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        else:
            keyboard.row(InlineKeyboardButton(text=f"{date} {time} {event.type}", callback_data=f"admin-event_{event.id}"))

    keyboard.adjust(1)
    return keyboard


def event_card_keyboard_admin(event: EventRel) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()

    if event.users_registered:
        for idx, user in enumerate(event.users_registered, start=1):
            keyboard.row(InlineKeyboardButton(text=f"{idx}", callback_data=f"admin-event-user_{event.id}_{user.id}"))
        keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"admin-event-delete_{event.id}"))
    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-events"))
    return keyboard


def tournament_card_admin_keyboard(main_teams: List[TeamUsers], reserve_teams: List[TeamUsers], tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardBuilder()
    all_teams: List[TeamUsers] = main_teams + reserve_teams

    if all_teams:
        for idx, team in enumerate(all_teams, start=1):
            keyboard.row(InlineKeyboardButton(text=f"{team.title}", callback_data=f"admin-delete-team_{tournament_id}_{team.team_id}"))
        keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"admin-t-delete_{tournament_id}"))
    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-events"))
    return keyboard


def tournament_card_level_keyboard(main_teams: List[TeamUsers], reserve_teams: List[TeamUsers], tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π"""
    keyboard = InlineKeyboardBuilder()
    all_teams: List[TeamUsers] = main_teams + reserve_teams

    if all_teams:
        for idx, team in enumerate(all_teams, start=1):
            keyboard.row(InlineKeyboardButton(text=f"{team.title}", callback_data=f"admin-t-level-team_{tournament_id}_{team.team_id}"))
        keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-levels"))
    return keyboard


def choose_player_for_level(users: List[User], tournament_id: int, team_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Ä–æ–≤–Ω—è"""
    keyboard = InlineKeyboardBuilder()

    for idx, user in enumerate(users, start=1):
        keyboard.row(InlineKeyboardButton(text=f"{idx}", callback_data=f"admin-t-level-user_{tournament_id}_{team_id}_{user.id}"))
    keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"admin-t-levels_{tournament_id}"))
    return keyboard


def yes_no_keyboard_for_admin_delete_user_from_event(event_id: int, user_id: int) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"admin-event-user-delete_{event_id}_{user_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"admin-event_{event_id}"))
    keyboard.adjust(2)

    return keyboard


def admin_confirmation_delete_team_keyboard(tournament_id: int, team_id: int) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"delete-team-confirmed_{tournament_id}_{team_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"admin-tournament_{tournament_id}"))
    keyboard.adjust(2)

    return keyboard


def yes_no_keyboard_for_admin_delete_event(event_id: int) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"admin-event-delete-confirm_{event_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"admin-event_{event_id}"))
    keyboard.adjust(2)

    return keyboard


def admin_confirmation_delete_tournament_keyboard(tournament_id: int) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"admin-t-delete-confirm_{tournament_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"admin-tournament_{tournament_id}"))
    keyboard.adjust(2)

    return keyboard


def back_to_admin_events() -> InlineKeyboardBuilder:
    """–ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-events"))

    return keyboard


def events_levels_keyboard_admin(events: list[Event | Tournament]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω—É –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π"""
    keyboard = InlineKeyboardBuilder()

    for event in events:
        date = convert_date(event.date)

        # —Ç—É—Ä–Ω–∏—Ä—ã
        if type(event) == Tournament:
            keyboard.row(InlineKeyboardButton(text=f"üèÜ {date} {event.type}", callback_data=f"admin-t-levels_{event.id}"))
        # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        else:
            keyboard.row(InlineKeyboardButton(text=f"{date} {event.type}", callback_data=f"admin-event-levels_{event.id}"))

    keyboard.adjust(1)
    return keyboard


def event_levels_card_keyboard_admin(event: EventRel) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
    keyboard = InlineKeyboardBuilder()

    if event.users_registered:
        for idx, user in enumerate(event.users_registered, start=1):
            keyboard.row(InlineKeyboardButton(text=f"{idx}", callback_data=f"admin-event-level-user_{event.id}_{user.id}"))
        keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-levels"))
    return keyboard


def event_levels_keyboards(event_id: int, user_id: int) -> InlineKeyboardBuilder:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.levels.items():
        keyboard.row(InlineKeyboardButton(text=f"{v}", callback_data=f"admin-add-user-level_{event_id}_{user_id}_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"admin-event-levels_{event_id}"))

    return keyboard


def t_levels_keyboards(tournament_id: int, team_id: int, user_id: int) -> InlineKeyboardBuilder:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.levels.items():
        keyboard.row(InlineKeyboardButton(text=f"{v}", callback_data=f"admin-add-t-level_{tournament_id}_{user_id}_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"admin-t-level-team_{tournament_id}_{team_id}"))

    return keyboard


def levels_keyboards() -> InlineKeyboardBuilder:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.levels.items():
        keyboard.row(InlineKeyboardButton(text=f"{v}", callback_data=f"admin-add-event-level_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_cancel"))

    return keyboard


def tournament_levels_keyboards() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–≤–Ω—è —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.tournament_points.items():
        keyboard.row(InlineKeyboardButton(text=f"{v[0]}", callback_data=f"admin-add-tournament-level_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_cancel"))

    return keyboard


def back_to_tournament(tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"user-tournament_{tournament_id}"))

    return keyboard


def team_card_keyboard(tournament_id: int, team_id: int, user_already_in_team: bool,
                       user_already_has_another_team: bool, user_is_team_leader: bool,
                       over_points: bool, over_players_count: bool, wrong_level: bool,
                       payment: TournamentPayment | None,
                       back_to: str) -> InlineKeyboardBuilder:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    user_already_in_team: bool - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
    user_already_has_another_team: bool - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∞ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    user_is_team_leader: bool - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
    over_points: bool - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
    over_players_count: bool - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
    wrong_level: bool - –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    """
    keyboard = InlineKeyboardBuilder()

    if user_is_team_leader:
        if not payment:
            keyboard.row(InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É",
                                              callback_data=f"pay-for-team_{team_id}_{tournament_id}"))
        keyboard.row(
            InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ª–∏–±–µ—Ä–æ", callback_data=f"choose-libero_{team_id}_{tournament_id}"))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ, —É –Ω–µ–≥–æ –Ω–µ—Ç –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã
    if not user_already_in_team and not user_already_has_another_team and not over_points and not over_players_count:
        # –µ—Å–ª–∏ —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç
        if not wrong_level:
            keyboard.row(InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É",
                                              callback_data=f"reg-user-in-team_{team_id}_{tournament_id}"))
        # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å –ª–∏–±–µ—Ä–æ
        elif not over_players_count:
            keyboard.row(InlineKeyboardButton(text="–°—Ç–∞—Ç—å –ª–∏–±–µ—Ä–æ –∫–æ–º–∞–Ω–¥—ã",
                                              callback_data=f"reg-libero-in-team_{team_id}_{tournament_id}"))
    # –ï—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    elif user_already_in_team:
        keyboard.row(InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã",
                                          callback_data=f"leave-user-from-team_{team_id}_{tournament_id}"))

    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=back_to))

    return keyboard


def choose_libero(team: TeamUsers, tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ª–∏–±–µ—Ä–æ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞"""
    keyboard = InlineKeyboardBuilder()

    for idx, user in enumerate(team.users, start=1):
        if user.id == team.team_libero_id:
            continue
        keyboard.row(InlineKeyboardButton(text=f"{user.firstname} {user.lastname}", callback_data=f"choose-libero-user_{team.team_id}_{tournament_id}_{user.id}"))

    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"register-in-team_{team.team_id}_{tournament_id}_mm"))

    return keyboard


def choose_libero_accept(team_id: int, tournament_id: int, user_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ª–∏–±–µ—Ä–æ"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"choose-liber-accept_{team_id}_{tournament_id}_{user_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"choose-libero_{team_id}_{tournament_id}"))

    keyboard.adjust(2)

    return keyboard


def yes_no_leave_team_keyboard(user_is_team_leader: bool, team_id: int, tournament_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
    keyboard = InlineKeyboardBuilder()

    # –î–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    if user_is_team_leader:
        keyboard.row(InlineKeyboardButton(text="–î–∞",
                                          callback_data=f"c-del-team_{team_id}_{tournament_id}"))
        keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç",
                                          callback_data=f"register-in-team_{team_id}_{tournament_id}_mm"))
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else:
        keyboard.row(InlineKeyboardButton(text="–î–∞",
                                          callback_data=f"del-team_{team_id}_{tournament_id}"))
        keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç",
                                          callback_data=f"register-in-team_{team_id}_{tournament_id}_mm"))

    # keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"user-tournament_{tournament_id}"))
    keyboard.adjust(2)
    return keyboard


def yes_no_accept_user_in_team_keyboard(team_id: int, user_id: int, tournament_id: int, for_libero: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
    keyboard = InlineKeyboardBuilder()

    # –î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–±–µ—Ä–æ
    if for_libero:
        keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"accept-libero-in-team_{team_id}_{user_id}_{tournament_id}"))
        keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"refuse-libero-in-team_{team_id}_{user_id}_{tournament_id}"))

    # –î–ª—è –ø—Ä–∏–µ–º–∞ –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    else:
        keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"accept-user-in-team_{team_id}_{user_id}_{tournament_id}"))
        keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"refuse-user-in-team_{team_id}_{user_id}_{tournament_id}"))

    return keyboard


def back_and_choose_gender_keyboard(back_to: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –ø–æ–ª –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"menu_profile"))
    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))
    return keyboard


def cancel_update_profile_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_update_cancel"))
    return keyboard


def cancel_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_cancel"))
    return keyboard


def back_keyboard(back_to: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))
    return keyboard
