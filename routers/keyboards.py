import datetime

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from functools import wraps
from typing import Callable, List

from database.schemas import Event, User, EventRel, PaymentsEventsUsers, Payment, ReservedEvent, Tournament, Team, \
    TeamUsers
from routers.utils import convert_date, convert_time, get_weekday_from_date
from settings import settings


def back_button(callback_data: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    def wrapper(func: Callable):
        @wraps(func)
        def inner(*args, **kwargs):
            result = func(*args, **kwargs)
            result.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"back_{callback_data}"))
            return result
        return inner
    return wrapper


# USERS KEYBOARDS
def menu_users_keyboard() -> InlineKeyboardBuilder:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üóìÔ∏è –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data=f"menu_all-events"))
    keyboard.row(InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"menu_profile"))
    keyboard.row(InlineKeyboardButton(text="üèê –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data=f"menu_my-events"))

    keyboard.adjust(2)
    return keyboard


@back_button("all-events")
def events_keyboard(events: list[EventRel | Tournament], user: User, reserved_events: List[ReservedEvent]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    keyboard = InlineKeyboardBuilder()

    for event in events:
        # –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
        if type(event) == Tournament:
            # TODO —É—á–µ—Å—Ç—å –≥–¥–µ —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω—ã –∏–ª–∏ –≤ —Ä–µ–∑–µ—Ä–≤
            time = event.date.time().strftime("%H:%M")

            keyboard.row(InlineKeyboardButton(text=f"{time} üèÅ {event.type}",
                                              callback_data=f"user-tournament_{event.id}"))

        elif type(event) == EventRel:
            time = event.date.time().strftime("%H:%M")

            registered = ""
            if user in event.users_registered:
                registered = "‚úÖÔ∏è" + " "

            reserved = ""
            if event.id in [reserve.event.id for reserve in reserved_events]:
                reserved = "üìù" + " "

            keyboard.row(InlineKeyboardButton(text=f"{registered}{reserved}{time} {event.type}",
                                              callback_data=f"user-event_{event.id}"))

    keyboard.adjust(1)
    return keyboard


@back_button("user-menu")
def dates_keyboard(dates: dict[str:int]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞—Ç–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    keyboard = InlineKeyboardBuilder()

    for key in dates.keys():
        weekday = get_weekday_from_date(key)
        count = dates[key]
        if count == 1:
            events = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        elif count in [2, 3, 4]:
            events = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        else:
            events = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"

        keyboard.row(

            InlineKeyboardButton(text=f"{key} {weekday} ({count} {events})", callback_data=f"events-date_{key}"))

    keyboard.adjust(1)
    return keyboard


@back_button("user-menu")
def user_profile_keyboard() -> InlineKeyboardBuilder:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"update_user_profile")
    )
    return keyboard


@back_button("user-menu")
def user_events(payments: list[PaymentsEventsUsers], reserved_events: list[ReservedEvent]) -> InlineKeyboardBuilder:
    """–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    keyboard = InlineKeyboardBuilder()
    reserved_events_ids = [reserve.event.id for reserve in reserved_events]

    for payment in payments:
        date = convert_date(payment.event.date)
        weekday = settings.weekdays[datetime.datetime.weekday(payment.event.date)]

        if payment.event.id in reserved_events_ids:
            status = "üìù"
        elif payment.paid_confirm:
            status = "‚úÖÔ∏è"
        else:
            status = "‚è≥"

        keyboard.row(InlineKeyboardButton(
            text=f"{status} {date} ({weekday}) {payment.event.type}",
            callback_data=f"my-events_{payment.id}")
        )

    keyboard.adjust(1)
    return keyboard


def my_event_card_keyboard(payment: Payment, reserved_event: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –º–æ–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    keyboard = InlineKeyboardBuilder()

    # –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if payment.paid_confirm:
        if reserved_event:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ä–µ–∑–µ—Ä–≤",
                    callback_data=f"unreg-user-reserve_{payment.event_id}_{payment.user_id}"))
        else:
            keyboard.row(
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                    callback_data=f"unreg-user_{payment.event_id}_{payment.user_id}"
                )
            )

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"menu_my-events"))

    return keyboard


def tournament_card_keyboard(tournament_id: int, user_id: int, back_to: str, teams: list[TeamUsers]) -> InlineKeyboardBuilder:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —á–µ–º–ø–∏–æ–Ω–∞—Ç"""
    keyboard = InlineKeyboardBuilder()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã
    ordered_teams = [team for team in sorted(teams, key=lambda x: x.title)]

    if ordered_teams:
        for team in ordered_teams:
            keyboard.row(InlineKeyboardButton(text=f"{team.title}", callback_data=f"register-in-team_{team.team_id}"))

    keyboard.row(InlineKeyboardButton(text=f"‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"register-new-team_{tournament_id}"))
    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))

    return keyboard


def event_card_keyboard(event_id: int,
                        user_id: int,
                        payment: Payment | None,
                        back_to: str,
                        full_event: bool) -> InlineKeyboardBuilder:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    keyboard = InlineKeyboardBuilder()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
    if not payment:
        # –µ—Å–ª–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤ —Ä–µ–∑–µ—Ä–≤
        if full_event:
            keyboard.row(InlineKeyboardButton(text=f"üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ä–µ–∑–µ—Ä–≤", callback_data=f"reg-user-reserve_{event_id}_{user_id}"))
        # —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –µ—Å—Ç—å
        else:
            keyboard.row(InlineKeyboardButton(text=f"‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"reg-user_{event_id}_{user_id}"))

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))
    return keyboard


def yes_no_keyboard_for_unreg_from_event(event_id: int, user_id: int, payment_id: int, reserved_event: bool = False) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–æ–±—ã—Ç–∏—è –≤ –ú–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    keyboard = InlineKeyboardBuilder()

    if reserved_event:
        keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"unreg-user-confirmed-reserve_{event_id}_{user_id}"))
    else:
        keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"unreg-user-confirmed_{event_id}_{user_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"my-events_{payment_id}"))
    keyboard.adjust(2)

    return keyboard


# PAYMENTS
def payment_confirm_keyboard(user: User, event: Event, to_reserve: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardBuilder()
    if to_reserve:
        keyboard.row(InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid-reserve_{user.id}_{event.id}"
        ))
    else:
        keyboard.row(
            InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{user.id}_{event.id}")
        )

    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"user-event_{event.id}"))

    return keyboard


def main_keyboard_or_my_events() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –≤ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"back_user-menu"),
        InlineKeyboardButton(
            text="üèê –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"menu_my-events"),
    )

    keyboard.adjust(2)

    return keyboard


def confirm_decline_keyboard(event_id: int, user_id: int, to_reserve: bool = False) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º"""
    keyboard = InlineKeyboardBuilder()
    if to_reserve:
        keyboard.row(
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"admin-payment-reserve_ok_{event_id}_{user_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"admin-payment-reserve_cancel_{event_id}_{user_id}"),
        )
    else:
        keyboard.row(
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"admin-payment_ok_{event_id}_{user_id}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"admin-payment_cancel_{event_id}_{user_id}"), )
    return keyboard


# ADMIN KEYBOARDS
def events_keyboard_admin(events: list[Event]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω—É"""
    keyboard = InlineKeyboardBuilder()

    for event in events:
        date = convert_date(event.date)
        time = convert_time(event.date)
        keyboard.row(InlineKeyboardButton(text=f"{date} {time} {event.type}", callback_data=f"admin-event_{event.id}"))

    keyboard.adjust(1)
    return keyboard


def event_card_keyboard_admin(event: EventRel) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()

    if event.users_registered:
        for idx, user in enumerate(event.users_registered, start=1):
            keyboard.row(InlineKeyboardButton(text=f"{idx}", callback_data=f"admin-event-user_{event.id}_{user.id}"))
        keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"admin-event-delete_{event.id}"))
    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-events"))
    return keyboard


def yes_no_keyboard_for_admin_delete_user_from_event(event_id: int, user_id: int) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"admin-event-user-delete_{event_id}_{user_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"admin-event_{event_id}"))
    keyboard.adjust(2)

    return keyboard


def yes_no_keyboard_for_admin_delete_event(event_id: int) -> InlineKeyboardBuilder:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text="–î–∞", callback_data=f"admin-event-delete-confirm_{event_id}"))
    keyboard.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"admin-event_{event_id}"))
    keyboard.adjust(2)

    return keyboard


def events_levels_keyboard_admin(events: list[Event]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω—É –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π"""
    keyboard = InlineKeyboardBuilder()

    for event in events:
        date = convert_date(event.date)
        keyboard.row(InlineKeyboardButton(text=f"{date} {event.type}", callback_data=f"admin-event-levels_{event.id}"))

    keyboard.adjust(1)
    return keyboard


def event_levels_card_keyboard_admin(event: EventRel) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
    keyboard = InlineKeyboardBuilder()

    if event.users_registered:
        for idx, user in enumerate(event.users_registered, start=1):
            keyboard.row(InlineKeyboardButton(text=f"{idx}", callback_data=f"admin-event-level-user_{event.id}_{user.id}"))
        keyboard.adjust(3)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data="back-admin-levels"))
    return keyboard


def event_levels_keyboards(event_id: int, user_id: int) -> InlineKeyboardBuilder:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.levels.items():
        keyboard.row(InlineKeyboardButton(text=f"{v}", callback_data=f"admin-add-user-level_{event_id}_{user_id}_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text=f"üîô –Ω–∞–∑–∞–¥", callback_data=f"admin-event-levels_{event_id}"))

    return keyboard


def levels_keyboards() -> InlineKeyboardBuilder:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.levels.items():
        keyboard.row(InlineKeyboardButton(text=f"{v}", callback_data=f"admin-add-event-level_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_cancel"))

    return keyboard


def tournament_levels_keyboards() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–≤–Ω—è —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()

    for k, v in settings.tournament_points.items():
        keyboard.row(InlineKeyboardButton(text=f"{v[0]}", callback_data=f"admin-add-tournament-level_{k}"))
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_cancel"))

    return keyboard


def cancel_update_profile_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_update_cancel"))
    return keyboard


def cancel_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="button_cancel"))
    return keyboard


def back_keyboard(back_to: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –Ω–∞–∑–∞–¥", callback_data=f"{back_to}"))
    return keyboard
