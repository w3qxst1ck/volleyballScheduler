from typing import Any

from aiogram import Router, types, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext

from database.schemas import TeamUsers, User, Tournament
from routers.middlewares import CheckPrivateMessageMiddleware, DatabaseMiddleware
from routers import keyboards as kb, messages as ms
from routers.fsm_states import RegNewTeamFSM
from database.orm import AsyncOrm
from routers import utils
from settings import settings

router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())
router.callback_query.middleware.register(CheckPrivateMessageMiddleware())
router.message.middleware.register(DatabaseMiddleware())
router.callback_query.middleware.register(DatabaseMiddleware())


# FOR TOURNAMENTS
@router.callback_query(lambda callback: callback.data.split("_")[0] == "user-tournament")
async def user_tournament_handler(callback: types.CallbackQuery, session: Any, state: FSMContext) -> None:
    """–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await state.clear()
    except:
        pass

    tournament_id = int(callback.data.split("_")[1])
    user_tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(user_tg_id)
    tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É—Ä–æ–≤–µ–Ω—å, –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    if not user.level:
        keyboard = kb.back_keyboard(f"events-date_{utils.convert_date(tournament.date)}")
        await callback.message.edit_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å",
                                         reply_markup=keyboard.as_markup())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª
    if not user.gender:
        keyboard = kb.back_and_choose_gender_keyboard(f"events-date_{utils.convert_date(tournament.date)}")
        await callback.message.edit_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª.\n"
                                         "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –≤ —Ä–∞–∑–¥–µ–ª–µ \"üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\".",
                                         reply_markup=keyboard.as_markup())
        return

    teams_users: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    msg = ms.tournament_card_for_user_message(tournament, teams_users)

    await callback.message.edit_text(
        msg,
        disable_web_page_preview=True,
        reply_markup=kb.tournament_card_keyboard(
            tournament,
            user.id,
            f"events-date_{utils.convert_date(tournament.date)}",
            teams_users
        ).as_markup()
    )


# REG NEW TEAM
@router.callback_query(F.data.split("_")[0] == "register-new-team")
async def register_new_team(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    tournament_id = int(callback.data.split("_")[1])

    # –Ω–∞—á–∏–Ω–∞–µ–º state
    await state.set_state(RegNewTeamFSM.title)

    keyboard = kb.back_keyboard(f"user-tournament_{tournament_id}")
    message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"

    prev_message = await callback.message.edit_text(message, reply_markup=keyboard.as_markup())

    await state.update_data(prev_message=prev_message)
    await state.update_data(tournament_id=tournament_id)


@router.message(RegNewTeamFSM.title)
async def get_team_title(message: types.Message, state: FSMContext, session: Any) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    data = await state.get_data()
    tournament_id = data["tournament_id"]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await data["prev_message"].delete()
    except:
        pass

    error_keyboard = kb.back_keyboard(f"user-tournament_{tournament_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    try:
        team_title = message.text
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=error_keyboard.as_markup())
        return

    team_leader_id = str(message.from_user.id)
    user = await AsyncOrm.get_user_by_tg_id(team_leader_id)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    try:
        await AsyncOrm.create_new_team(
            tournament_id,
            team_title,
            user.id,
            user.level,
            session
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", reply_markup=error_keyboard.as_markup())
        await state.clear()
        return

    await state.clear()
    keyboard = kb.back_to_tournament(tournament_id)
    msg = f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>\"{team_title}\"</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥—ã <b>{user.level}</b>"
    await message.answer(msg, reply_markup=keyboard.as_markup())


# –ö–ê–†–¢–û–ß–ö–ê –ö–û–ú–ê–ù–î–´
@router.callback_query(F.data.split("_")[0] == "register-in-team")
async def team_card(callback: types.CallbackQuery, session: Any) -> None:
    """–ó–∞–ø–∏—Å—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(tg_id)
    team = await AsyncOrm.get_team(team_id, session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –∏–∑ –∫–æ–º–∞–Ω–¥
    # tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    tournament_teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    user_already_has_another_team: bool = False
    for reg_team in tournament_teams:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        if reg_team.team_id == team.team_id:
            continue
        if user.id in [reg_user.id for reg_user in reg_team.users]:
            user_already_has_another_team = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —ç—Ç–æ–π –ª–∏ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_already_in_team: bool = False
    if user.id in [reg_user.id for reg_user in team.users]:
        user_already_in_team = True

    message = ms.team_card(team, user_already_in_team, user_already_has_another_team)
    keyboard = kb.team_card_keyboard(tournament_id, team_id, user_already_in_team, user_already_has_another_team)
    await callback.message.edit_text(message, reply_markup=keyboard.as_markup())


# REG USER IN TEAM
@router.callback_query(F.data.split("_")[0] == "reg-user-in-team")
async def reg_user_in_team(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    # TODO –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)
    team_leader: User = await AsyncOrm.get_user_by_id(team.team_leader_id)
    user: User = await AsyncOrm.get_user_by_tg_id(tg_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã
    msg_for_leader = ms.message_for_team_leader(user, team, tournament)
    keyboard = kb.yes_no_accept_user_in_team_keyboard(team_id, user.id)

    await bot.send_message(team_leader.tg_id, msg_for_leader, reply_markup=keyboard.as_markup())

    keyboard = kb.back_keyboard(f"register-in-team_{team_id}_{tournament_id}")
    await callback.message.edit_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω—É, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                     reply_markup=keyboard.as_markup())


# ACCEPT USER IN TEAM FOR TEAM LEADER
@router.callback_query(or_f(F.data.split("_")[0] == "accept-user-in-team",
                            F.data.split("_")[0] == "refuse-user-in-team"))
async def accept_refuse_user_in_team(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–ü—Ä–∏–µ–º –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É"""
    team_id = int(callback.data.split("_")[1])
    user_id = int(callback.data.split("_")[2])

    user: User = await AsyncOrm.get_user_by_id(user_id)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)

    # –ø—Ä–∏–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
    if callback.data.split("_")[0] == "accept-user-in-team":
        try:
            await AsyncOrm.add_user_in_team(team_id, user_id, session)
            msg_for_captain = f" ‚úÖ <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> " \
                              f"(—É—Ä. {settings.levels[user.level]}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É <b>{team.title}</b>"
            msg_for_user = f"‚úÖ –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\""

        # –ø—Ä–∏ –æ—à–∏–±–∫–µ (–ø–æ–ª—å-–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª—é–¥–µ–π, –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ —Ç–¥.)
        except Exception as e:
            msg_for_captain = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É\n" \
                              "–í–æ–∑–º–æ–∂–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∂–µ –Ω–µ—Ç –º–µ—Å—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞"
            msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\""

    # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    else:
        msg_for_captain = f" ‚ùå –ó–∞–ø—Ä–æ—Å <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> " \
                          f"(—É—Ä. {settings.levels[user.level]}) –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\" <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω</b>"
        msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\""

    # –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω—É
    await callback.message.edit_text(msg_for_captain)
    # –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(user.tg_id, msg_for_user)


# LEAVE FROM TEAM
@router.callback_query(F.data.split("_")[0] == "leave-user-from-team")
async def leave_from_team(callback: types.CallbackQuery, session: Any) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(tg_id)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)

    message = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã <b>\"{team.title}\"</b>?"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not team.team_leader_id == user.id:
        user_is_team_leader = False
    else:
        user_is_team_leader = True
        message += f"\n‚ùó –í—Å—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º"

    keyboard = kb.yes_no_leave_team_keyboard(user_is_team_leader, team_id, tournament_id)

    await callback.message.edit_text(message, reply_markup=keyboard.as_markup())


@router.callback_query(or_f(F.data.split("_")[0] == "c-del-team", F.data.split("_")[0] == "del-team"))
async def delete_team_from_tournament(callback: types.CallbackQuery, session: Any) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—É—Ä–Ω–∏—Ä–∞"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(tg_id)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)

    keyboard = kb.back_keyboard(f"user-tournament_{tournament_id}")

    # –î–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ —É–¥–∞–ª—è–µ–º –≤—Å—é –∫–æ–º–∞–Ω–¥—É
    if callback.data.split("_")[0] == "c-del-team":
        try:
            await AsyncOrm.delete_team_from_tournament(team_id, tg_id, session)
            await callback.message.edit_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"{team.title}\" —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞!", reply_markup=keyboard.as_markup())

        except:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

    # –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    else:
        try:
            await AsyncOrm.delete_user_from_team(team_id, user.id, session)
            await callback.message.edit_text(
                f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã \"{team.title}\"!",
                reply_markup=keyboard.as_markup()
            )

        except:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return








