from typing import Any, List

from aiogram import Router, types, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext

from database.schemas import TeamUsers, User, Tournament, TournamentTeams
from logger import logger
from routers.middlewares import CheckPrivateMessageMiddleware, DatabaseMiddleware
from routers import keyboards as kb, messages as ms
from routers.fsm_states import RegNewTeamFSM
from database.orm import AsyncOrm
from routers import utils
from routers.utils import calculate_team_points, convert_date_named_month
from settings import settings

router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())
router.callback_query.middleware.register(CheckPrivateMessageMiddleware())
router.message.middleware.register(DatabaseMiddleware())
router.callback_query.middleware.register(DatabaseMiddleware())


# FOR TOURNAMENTS
@router.callback_query(lambda callback: callback.data.split("_")[0] == "user-tournament")
async def user_tournament_handler(callback: types.CallbackQuery, session: Any, state: FSMContext) -> None:
    """–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await state.clear()
    except:
        pass

    tournament_id = int(callback.data.split("_")[1])
    user_tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(user_tg_id)
    tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É—Ä–æ–≤–µ–Ω—å, –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    if not user.level:
        keyboard = kb.back_keyboard(f"events-date_{utils.convert_date(tournament.date)}")
        await callback.message.edit_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å",
                                         reply_markup=keyboard.as_markup())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª
    if not user.gender:
        keyboard = kb.back_and_choose_gender_keyboard(f"events-date_{utils.convert_date(tournament.date)}")
        await callback.message.edit_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª.\n"
                                         "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –≤ —Ä–∞–∑–¥–µ–ª–µ \"üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\".",
                                         reply_markup=keyboard.as_markup())
        return

    teams_users: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    main_teams = []
    reserve_teams = []
    for team in teams_users:
        if team.reserve:
            reserve_teams.append(team)
        else:
            main_teams.append(team)

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    main_teams = [team for team in sorted(main_teams, key=lambda x: x.title)]

    msg = ms.tournament_card_for_user_message(tournament, main_teams, reserve_teams)

    await callback.message.edit_text(
        msg,
        disable_web_page_preview=True,
        reply_markup=kb.tournament_card_keyboard(
            tournament,
            user.id,
            f"events-date_{utils.convert_date(tournament.date)}",
            main_teams,
            reserve_teams
        ).as_markup()
    )


# REG NEW TEAM
@router.callback_query(or_f(F.data.split("_")[0] == "register-new-team", F.data.split("_")[0] == "register-reserve-team"))
async def register_new_team(callback: types.CallbackQuery, state: FSMContext, session: Any) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    tournament_id = int(callback.data.split("_")[1])
    user = await AsyncOrm.get_user_by_tg_id(str(callback.from_user.id))
    tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    if user.level > tournament.level or user.level == 1:
        msg = f"‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ —É—Ä–æ–≤–Ω—è {settings.tournament_points[tournament.level][0]}"
        await callback.message.edit_text(
            msg,
            reply_markup=kb.back_keyboard(f"user-tournament_{tournament_id}").as_markup()
        )
        return

    # –Ω–∞—á–∏–Ω–∞–µ–º state
    await state.set_state(RegNewTeamFSM.title)

    # –ø–æ–º–µ—á–∞–µ–º –µ—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤
    if callback.data.split("_")[0] == "register-reserve-team":
        await state.update_data(reserve=True)
    else:
        await state.update_data(reserve=False)

    keyboard = kb.back_keyboard(f"user-tournament_{tournament_id}")
    message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"

    prev_message = await callback.message.edit_text(message, reply_markup=keyboard.as_markup())

    await state.update_data(prev_message=prev_message)
    await state.update_data(tournament_id=tournament_id)


@router.message(RegNewTeamFSM.title)
async def get_team_title(message: types.Message, state: FSMContext, session: Any) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    data = await state.get_data()
    tournament_id = data["tournament_id"]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await data["prev_message"].delete()
    except:
        pass

    error_keyboard = kb.back_keyboard(f"user-tournament_{tournament_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    try:
        team_title = message.text
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=error_keyboard.as_markup())
        return

    team_leader_id = str(message.from_user.id)
    user = await AsyncOrm.get_user_by_tg_id(team_leader_id)

    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    team_users: List[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)
    to_reserve = data["reserve"]

    # –µ—Å–ª–∏ –º–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –Ω–µ—Ç
    if tournament.max_team_count <= len(team_users) or to_reserve:
        msg = f"üìù –ö–æ–º–∞–Ω–¥–∞ <b>\"{team_title}\"</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ."

    # –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –µ—â–µ –µ—Å—Ç—å
    else:
        msg = f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>\"{team_title}\"</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!"

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    try:
        await AsyncOrm.create_new_team(
            tournament_id,
            team_title,
            user.id,
            to_reserve,
            session
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", reply_markup=error_keyboard.as_markup())
        await state.clear()
        return

    await state.clear()

    keyboard = kb.back_to_tournament(tournament_id)
    await message.answer(msg, reply_markup=keyboard.as_markup())


# –ö–ê–†–¢–û–ß–ö–ê –ö–û–ú–ê–ù–î–´
@router.callback_query(F.data.split("_")[0] == "register-in-team")
async def team_card(callback: types.CallbackQuery, session: Any) -> None:
    """–ó–∞–ø–∏—Å—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(tg_id)
    team = await AsyncOrm.get_team(team_id, session)

    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    tournament_teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –∏–∑ –∫–æ–º–∞–Ω–¥
    user_already_has_another_team: bool = False
    for reg_team in tournament_teams:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        if reg_team.team_id == team.team_id:
            continue
        if user.id in [reg_user.id for reg_user in reg_team.users]:
            user_already_has_another_team = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —ç—Ç–æ–π –ª–∏ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_already_in_team: bool = False
    if user.id in [reg_user.id for reg_user in team.users]:
        user_already_in_team = True

    # –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –ª–∏ –±–∞–ª–ª—ã
    over_points: bool = False
    over_players_count: bool = False
    wrong_level: bool = False
    if not user_already_in_team and not user_already_has_another_team:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É
        team_with_new_user = team.users + [user]
        team_points = calculate_team_points(team_with_new_user)
        if team_points > settings.tournament_points[tournament.level][1]:
            over_points = True

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ
        if len(team.users) + 1 > tournament.max_team_players:
            over_players_count = True

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
        if user.level == 1 or user.level > tournament.level:
            wrong_level = True

    message = ms.team_card(team, user_already_in_team, user_already_has_another_team, over_points, over_players_count,
                           wrong_level)
    keyboard = kb.team_card_keyboard(tournament_id, team_id, user_already_in_team, user_already_has_another_team,
                                     over_points, over_players_count, wrong_level)
    await callback.message.edit_text(message, reply_markup=keyboard.as_markup())


# REG USER IN TEAM
@router.callback_query(F.data.split("_")[0] == "reg-user-in-team")
async def reg_user_in_team(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    # TODO –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)
    team_leader: User = await AsyncOrm.get_user_by_id(team.team_leader_id)
    user: User = await AsyncOrm.get_user_by_tg_id(tg_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã
    msg_for_leader = ms.message_for_team_leader(user, team, tournament)
    keyboard = kb.yes_no_accept_user_in_team_keyboard(team_id, user.id, tournament_id)

    await bot.send_message(team_leader.tg_id, msg_for_leader, reply_markup=keyboard.as_markup())

    keyboard = kb.back_to_tournament(tournament_id)
    await callback.message.edit_text("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω—É, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                     reply_markup=keyboard.as_markup())


# ACCEPT USER IN TEAM FOR TEAM LEADER
@router.callback_query(or_f(F.data.split("_")[0] == "accept-user-in-team",
                            F.data.split("_")[0] == "refuse-user-in-team"))
async def accept_refuse_user_in_team(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–ü—Ä–∏–µ–º –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É"""
    team_id = int(callback.data.split("_")[1])
    user_id = int(callback.data.split("_")[2])
    tournament_id = int(callback.data.split("_")[3])

    user: User = await AsyncOrm.get_user_by_id(user_id)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)

    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    tournament_teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –∏–∑ –∫–æ–º–∞–Ω–¥
    user_already_has_another_team: bool = False
    for reg_team in tournament_teams:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        if reg_team.team_id == team.team_id:
            continue
        if user.id in [reg_user.id for reg_user in reg_team.users]:
            user_already_has_another_team = True

    # –ø—Ä–∏–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
    if callback.data.split("_")[0] == "accept-user-in-team":
        team_users = team.users + [user]
        team_points = calculate_team_points(team_users)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
        if len(team.users) + 1 > tournament.max_team_players:
            msg_for_captain = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\", —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞"
            msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ \"{team.title}\" —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å
        elif team_points > settings.tournament_points[tournament.level][1]:
            msg_for_captain = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\", —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º–æ–µ"
            msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã \"{team.title}\" –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º–æ–µ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –∏–∑ –∫–æ–º–∞–Ω–¥
        elif user_already_has_another_team:
            msg_for_captain = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\", —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∞ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ"
            msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\", —Ç–∞–∫ –∫–∞–∫ –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∞ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ"

        # –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É
        else:
            try:
                await AsyncOrm.add_user_in_team(team_id, user_id, session)
                msg_for_captain = f" ‚úÖ <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> " \
                                  f"({settings.levels[user.level]}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É <b>{team.title}</b>"
                msg_for_user = f"‚úÖ –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\""

            # –ø—Ä–∏ –æ—à–∏–±–∫–µ (–ø–æ–ª—å-–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª—é–¥–µ–π, –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ —Ç–¥.)
            except Exception as e:
                msg_for_captain = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É\n" \
                                  "–í–æ–∑–º–æ–∂–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∂–µ –Ω–µ—Ç –º–µ—Å—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞"
                msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\""

    # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    else:
        msg_for_captain = f" ‚ùå –ó–∞–ø—Ä–æ—Å <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> " \
                          f"({settings.levels[user.level]}) –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\" <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω</b>"
        msg_for_user = f" ‚ùå –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É \"{team.title}\""

    # –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω—É
    await callback.message.edit_text(msg_for_captain)
    # –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = kb.back_to_tournament(tournament_id)
    await bot.send_message(user.tg_id, msg_for_user, reply_markup=keyboard.as_markup())


# LEAVE FROM TEAM
@router.callback_query(F.data.split("_")[0] == "leave-user-from-team")
async def leave_from_team(callback: types.CallbackQuery, session: Any) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(tg_id)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)

    message = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã <b>\"{team.title}\"</b>?"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not team.team_leader_id == user.id:
        user_is_team_leader = False
    else:
        user_is_team_leader = True
        message += f"\n‚ùó –í—Å—è –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º"

    keyboard = kb.yes_no_leave_team_keyboard(user_is_team_leader, team_id, tournament_id)

    await callback.message.edit_text(message, reply_markup=keyboard.as_markup())


@router.callback_query(or_f(F.data.split("_")[0] == "c-del-team", F.data.split("_")[0] == "del-team"))
async def delete_team_from_tournament(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—É—Ä–Ω–∏—Ä–∞"""
    team_id = int(callback.data.split("_")[1])
    tournament_id = int(callback.data.split("_")[2])
    tg_id = str(callback.from_user.id)

    user = await AsyncOrm.get_user_by_tg_id(tg_id)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)
    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    keyboard = kb.back_keyboard(f"user-tournament_{tournament_id}")

    # –î–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ —É–¥–∞–ª—è–µ–º –≤—Å—é –∫–æ–º–∞–Ω–¥—É
    if callback.data.split("_")[0] == "c-del-team":
        try:
            await AsyncOrm.delete_team_from_tournament(team_id, tg_id, session)
            await callback.message.edit_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"{team.title}\" —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞!", reply_markup=keyboard.as_markup())

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
            converted_date = convert_date_named_month(tournament.date)
            msg = f"‚ÑπÔ∏è –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> —É–¥–∞–ª–∏–ª –∫–æ–º–∞–Ω–¥—É " \
              f"<b>{team.title}</b> —Å —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament.title}\" {converted_date}"
            for u in team.users:
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
                if u.id == team.team_leader_id:
                    continue

                try:
                    await bot.send_message(u.tg_id, msg)
                except Exception:
                    pass

            # –±–µ—Ä–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã)
            if team.reserve is False:
                try:
                    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                    reserve_team: TeamUsers = await AsyncOrm.get_first_reserve_team(tournament_id, session)

                    # –º–µ–Ω—è–µ–º reserve –Ω–∞ False
                    if reserve_team:
                        await AsyncOrm.transfer_team_from_reserve(reserve_team.team_id, session)

                        # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
                        converted_date = convert_date_named_month(tournament.date)
                        msg = f"‚ÑπÔ∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{reserve_team.title}</b> –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament.title}\" {converted_date} " \
                              f"–≤ —Å–≤—è–∑–∏ —Å –ø–æ—è–≤–ª–µ–Ω–∏–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞."

                        for u in reserve_team.users:
                            try:
                                await bot.send_message(u.tg_id, msg)
                            except Exception:
                                pass

                except Exception:
                    pass

        except:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

    # –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    else:
        try:
            await AsyncOrm.delete_user_from_team(team_id, user.id, session)
            await callback.message.edit_text(
                f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã \"{team.title}\"!",
                reply_markup=keyboard.as_markup()
            )

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞
            captain = await AsyncOrm.get_user_by_id(team.team_leader_id)
            converted_date = convert_date_named_month(tournament.date)
            msg = f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user.tg_id}'>{user.firstname} {user.lastname}</a> –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–∞–Ω–¥—ã " \
                  f"<b>{team.title}</b> —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament.title}\" {converted_date}"
            try:
                await bot.send_message(captain.tg_id, msg)
            except Exception:
                pass

        except:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return





