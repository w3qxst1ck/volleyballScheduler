from typing import Any, List

from aiogram import Router, types, F, Bot

from database.orm import AsyncOrm
from database.schemas import TeamUsers, Tournament
from routers.middlewares import CheckPrivateMessageMiddleware, CheckIsAdminMiddleware, DatabaseMiddleware
from routers.utils import convert_date, convert_time, convert_date_named_month
from settings import settings
from routers import messages as ms
from routers import keyboards as kb
from routers import utils


router = Router()
router.message.middleware.register(CheckPrivateMessageMiddleware())
router.message.middleware.register(CheckIsAdminMiddleware(settings.admins))
router.callback_query.middleware.register(CheckIsAdminMiddleware(settings.admins))
router.message.middleware.register(DatabaseMiddleware())
router.callback_query.middleware.register(DatabaseMiddleware())


# ADMIN TOURNAMENT CARD
@router.callback_query(F.data.split("_")[0] == "admin-tournament")
async def admin_tournament_card(callback: types.CallbackQuery, session: Any) -> None:
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    tournament_id = int(callback.data.split("_")[1])
    tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    teams_users: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    main_teams = []
    reserve_teams = []
    for team in teams_users:
        if team.reserve:
            reserve_teams.append(team)
        else:
            main_teams.append(team)

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    main_teams = [team for team in sorted(main_teams, key=lambda x: x.title)]

    msg = ms.tournament_card_for_user_message(tournament, main_teams, reserve_teams, for_admin=True)
    keyboard = kb.tournament_card_admin_keyboard(main_teams, reserve_teams, tournament_id)

    await callback.message.edit_text(msg, reply_markup=keyboard.as_markup(), disable_web_page_preview=True)


# DELETE TOURNAMENT
@router.callback_query(F.data.split("_")[0] == "admin-t-delete")
async def admin_delete_tournament(callback: types.CallbackQuery, session: Any) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    tournament_id = int(callback.data.split("_")[1])
    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    date = utils.convert_date(tournament.date)
    time = utils.convert_time(tournament.date)
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä <b>{tournament.type} \"{tournament.title}\"</b> {date} –≤ {time}?",
        reply_markup=kb.admin_confirmation_delete_tournament_keyboard(tournament_id).as_markup())


@router.callback_query(F.data.split("_")[0] == "admin-t-delete-confirm")
async def admin_delete_tournament_confirmed(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    admin_tg_id = str(callback.from_user.id)
    tournament_id = int(callback.data.split("_")[1])
    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    teams: List[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament_id, session)

    try:
        # —É–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        await AsyncOrm.delete_tournament(tournament_id, admin_tg_id, session)

        # –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
        admin_msg = "–¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω ‚úÖ"
        keyboard = kb.back_to_admin_events()
        await callback.message.edit_text(admin_msg, reply_markup=keyboard.as_markup())

        # –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        date = convert_date(tournament.date)
        time = convert_time(tournament.date)
        user_msg = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                   f"–¢—É—Ä–Ω–∏—Ä <b>\"{tournament.title}\"</b>, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ <b>{date}</b> –≤ <b>{time}</b>, " \
                   f"<b>–æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n" \
                   f"–ü–æ –≤–æ–ø—Ä–æ—Å—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{settings.main_admin_url}"

        for team in teams:
            for user in team.users:
                try:
                    await bot.send_message(user.tg_id, user_msg)
                except Exception:
                    pass
    # –ø—Ä–∏ –æ—à–∏–±–∫–µ
    except:
        keyboard = kb.back_to_admin_events()
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞", reply_markup=keyboard.as_markup())
        return


# DELETE TEAM FROM TOURNAMENT
@router.callback_query(F.data.split("_")[0] == "admin-delete-team")
async def admin_delete_team(callback: types.CallbackQuery, session: Any) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(callback.data.split("_")[1])
    team_id = int(callback.data.split("_")[2])

    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)
    team: TeamUsers = await AsyncOrm.get_team(team_id, session)

    msg = f"–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É \"{team.title}\" —Å —Ç—É—Ä–Ω–∏—Ä–∞ {tournament.title}?"
    keyboard = kb.admin_confirmation_delete_team_keyboard(tournament_id, team_id)

    await callback.message.edit_text(msg, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("_")[0] == "delete-team-confirmed")
async def admin_delete_team_confirmed(callback: types.CallbackQuery, session: Any, bot: Bot) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞"""
    admin_tg_id = str(callback.from_user.id)
    tournament_id = int(callback.data.split("_")[1])
    team_id = int(callback.data.split("_")[2])

    team: TeamUsers = await AsyncOrm.get_team(team_id, session)
    tournament: Tournament = await AsyncOrm.get_tournament_by_id(tournament_id, session)

    # —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    try:
        await AsyncOrm.delete_team_from_tournament(team_id, admin_tg_id, session)

        # –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
        admin_msg = f"–ö–æ–º–∞–Ω–¥–∞ \"{team.title}\" —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞ {tournament.title} ‚úÖ"
        keyboard = kb.back_to_admin_events()
        await callback.message.edit_text(admin_msg, reply_markup=keyboard.as_markup())

        # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        date = convert_date(tournament.date)
        time = convert_time(tournament.date)
        user_msg = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                   f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É \"{team.title}\" —Å —Ç—É—Ä–Ω–∏—Ä–∞ <b>\"{date} {time} {tournament.title}\"</b>!\n\n" \
                   f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"

        for user in team.users:
            try:
                await bot.send_message(user.tg_id, user_msg)
            except Exception:
                pass

    except:
        keyboard = kb.back_to_admin_events()
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞", reply_markup=keyboard.as_markup())
        return

    # –¥–æ–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
    try:
        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        reserve_team: TeamUsers = await AsyncOrm.get_first_reserve_team(tournament_id, session)

        # –º–µ–Ω—è–µ–º reserve –Ω–∞ False
        if reserve_team:
            await AsyncOrm.transfer_team_from_reserve(reserve_team.team_id, session)

            # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
            converted_date = convert_date_named_month(tournament.date)
            msg = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                  f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{reserve_team.title}</b> –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ <b>\"{tournament.title}\" {converted_date}</b> " \
                  f"–≤ —Å–≤—è–∑–∏ —Å –ø–æ—è–≤–ª–µ–Ω–∏–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞."

            for u in reserve_team.users:
                try:
                    await bot.send_message(u.tg_id, msg)
                except Exception:
                    pass

    except Exception:
        pass

