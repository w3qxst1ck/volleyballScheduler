import datetime
from typing import Any

import aiogram
import asyncpg
import pytz

from database.orm import AsyncOrm
import routers.messages as ms
from database.schemas import Tournament, TeamUsers, User, TournamentPayment
from routers import utils
from settings import settings
from routers.utils import write_excel_file


async def run_every_day(bot: aiogram.Bot):
    """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    session = await asyncpg.connect(
        user=settings.db.postgres_user,
        host=settings.db.postgres_host,
        password=settings.db.postgres_password,
        port=settings.db.postgres_port,
        database=settings.db.postgres_db
    )

    await notify_users_about_events(bot, session)   # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
    await check_team_payment_for_tournament(session, bot)   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–ª–∞—Ç—ã
    await delete_old_events(session)    # —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
    await check_min_players_in_team(bot, session)   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ


async def run_every_hour(bot: aiogram.Bot) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å"""
    session = await asyncpg.connect(
        user=settings.db.postgres_user,
        host=settings.db.postgres_host,
        password=settings.db.postgres_password,
        port=settings.db.postgres_port,
        database=settings.db.postgres_db
    )

    await update_events(bot, session)
    await check_min_users_count(bot)
    await check_min_team_count(bot, session)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
    # TODO –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ


async def kick_from_tournaments_by_payments(bot: aiogram.Bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ 4 –¥–Ω—è"""
    session = await asyncpg.connect(
        user=settings.db.postgres_user,
        host=settings.db.postgres_host,
        password=settings.db.postgres_password,
        port=settings.db.postgres_port,
        database=settings.db.postgres_db
    )

    tournaments: list[Tournament] = await AsyncOrm.get_all_tournaments(10, session)
    now = datetime.datetime.now(tz=pytz.timezone("Europe/Moscow"))

    for tournament in tournaments:
        if now + datetime.timedelta(days=settings.kick_team_without_pay_days) > \
                tournament.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):

            teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament.id, session)

            for team in teams:
                payment = await AsyncOrm.get_tournament_payment_by_team_id(team.team_id, session)

                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤ —Ä–µ–∑–µ—Ä–≤–µ
                if not payment or (not team.reserve and not payment.paid_confirm):

                    # —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç—É—Ä–Ω–∏—Ä–∞
                    await AsyncOrm.delete_team_from_tournament(team.team_id, None, session)

                    # –æ–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
                    date = utils.convert_date(tournament.date)
                    time = utils.convert_time(tournament.date)
                    msg_for_user = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                                   f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{team.title}</b> —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞ {tournament.type} " \
                                   f"\"{tournament.title}\" {date} {time}, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–∏–µ –Ω–µ –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ\n\n" \
                                   f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"
                    for user in team.users:
                        try:
                            await bot.send_message(user.tg_id, msg_for_user)
                        except:
                            pass

                    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞, –µ—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤ –µ—Å—Ç—å
                    first_reserve_team: TeamUsers | None = await AsyncOrm.get_first_reserve_team(tournament.id, session)
                    if first_reserve_team:
                        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤—É
                        await AsyncOrm.transfer_team_from_reserve(team.team_id, session)

                        # TODO —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å message
                        date = utils.convert_date(tournament.date)
                        time = utils.convert_time(tournament.date)
                        msg_for_users = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                                        f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{team.title}</b> –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ <b>–æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤</b> " \
                                        f"–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ {tournament.type} \"{tournament.title}\" {date} {time}\n\n" \
                                        f"–ö–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n\n" \
                                        f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"

                        # –æ–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
                        for user in first_reserve_team.users:
                            try:
                                await bot.send_message(user.tg_id, msg_for_users)
                            except:
                                pass


async def check_min_users_count(bot: aiogram.Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –∫–æ–ª-–≤–æ –∑–∞—Ä–µ–≥–∞–Ω—ã—Ö –ª—é–¥–µ–π"""
    active_events = await AsyncOrm.get_events(only_active=True)
    now = datetime.datetime.now(tz=pytz.timezone("Europe/Moscow"))

    for event in active_events:
        # now + datetime.timedelta(hours=2, seconds=10) - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 2 —á–∞—Å–∞
        # event.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3) - –ø–µ—Ä–µ–≤–æ–¥ –¥–∞—Ç—ã –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –º—Å–∫
        if now + datetime.timedelta(hours=2) > \
                event.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):
            event_with_users = await AsyncOrm.get_event_with_users(event.id)
            user_registered_count = len(event_with_users.users_registered)

            if event.min_user_count > user_registered_count:
                # –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
                await AsyncOrm.update_event_status_to_false(event.id)

                # –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                msg = ms.notify_canceled_event(event_with_users)
                for user in event_with_users.users_registered:

                    await bot.send_message(user.tg_id, msg)


async def check_min_team_count(bot: aiogram.Bot, session: Any):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä"""
    tournaments: list[Tournament] = await AsyncOrm.get_all_tournaments(2, session)
    now = datetime.datetime.now(tz=pytz.timezone("Europe/Moscow"))

    for tournament in tournaments:
        if now + datetime.timedelta(hours=settings.tournament_min_team_hours) > \
            tournament.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):

            teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament.id, session)
            # –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥
            if len(teams) < tournament.min_team_count:
                # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                await AsyncOrm.update_tournament_status_to_false(tournament.id, session)

                date = utils.convert_date(tournament.date)
                time = utils.convert_time(tournament.date)
                msg = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                      f"–¢—É—Ä–Ω–∏—Ä <b>{tournament.type}</b> \"{tournament.title}\" {date} {time} –æ—Ç–º–µ–Ω–µ–Ω –≤ —Å–≤—è–∑–∏ —Å " \
                      f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n" \
                      f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"

                # –æ–ø–æ–≤–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for team in teams:
                    for user in team.users:
                        try:
                            await bot.send_message(user.tg_id, msg)
                        except:
                            pass

                # –æ–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∞
                msg_for_admin = f"–¢—É—Ä–Ω–∏—Ä <b>{tournament.type}</b> \"{tournament.title}\" {date} {time} –æ—Ç–º–µ–Ω–µ–Ω –≤ —Å–≤—è–∑–∏ —Å " \
                                f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n" \
                                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–ø–∏—Ç–∞–Ω–∞–º <b>–∫–æ–º–∞–Ω–¥</b>:\n"
                for team in teams:
                    team_leader: User = await AsyncOrm.get_user_by_id(team.team_leader_id)
                    msg_for_admin += f"<a href='tg://user?id={team_leader.tg_id}'>{team_leader.firstname} {team_leader.lastname}</a> " \
                                     f"(–∫–æ–º–∞–Ω–¥–∞ <b>{team.title}</b>) - {tournament.price} —Ä—É–±.\n"

                try:
                    await bot.send_message(settings.main_admin_tg_id, msg_for_admin)
                except:
                    pass


async def check_min_players_in_team(bot: aiogram.Bot, session: Any):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
    tournaments: list[Tournament] = await AsyncOrm.get_all_tournaments(2, session)
    now = datetime.datetime.now(tz=pytz.timezone("Europe/Moscow"))

    for tournament in tournaments:
        if now + datetime.timedelta(days=settings.tournament_min_users_days) > tournament.date.astimezone(
            tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):

            teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament.id, session)

            for team in teams:
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤
                if team.reserve:
                    continue

                if len(team.users) < tournament.min_team_players:
                    payment: TournamentPayment = await AsyncOrm.get_tournament_payment_by_team_id(team.team_id, session)

                    # –∫–∏–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                    await AsyncOrm.delete_team_from_tournament(team.team_id, None, session)

                    # –æ–ø–æ–≤–µ—â–∞–µ–º –∫–∏–∫–Ω—É—Ç—ã—Ö
                    date = utils.convert_date(tournament.date)
                    time = utils.convert_time(tournament.date)
                    msg = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                          f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{team.title}</b> —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞ <b>{tournament.type}</b> \"{tournament.title}\" {date} {time} " \
                          f"–≤ —Å–≤—è–∑–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"

                    if payment and payment.paid_confirm:
                          msg += f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"

                    for user in team.users:
                        try:
                            await bot.send_message(user.tg_id, msg)
                        except:
                            pass

                    # –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–ø–ª–∞—Ç—ã —É –∫–æ–º–∞–Ω–¥—ã
                    if payment and payment.paid_confirm:
                        captain: User = await AsyncOrm.get_user_by_id(team.team_leader_id)
                        msg_for_admin = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∫–∞–ø–∏—Ç–∞–Ω—É <a href='tg://user?id={captain.tg_id}'>{captain.firstname} {captain.lastname}</a>" \
                                        f" –∫–æ–º–∞–Ω–¥—ã <b>{team.title}</b>, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞ {tournament.type} \"{tournament.title}\" {date} –≤ {time} " \
                                        f"–≤ —Å–≤—è–∑–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n" \
                                        f"–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º {tournament.price} —Ä—É–±."
                        try:
                            await bot.send_message(settings.main_admin_tg_id, msg_for_admin)
                        except:
                            pass

                    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤—É
                    first_reserve_team: TeamUsers | None = await AsyncOrm.get_first_reserve_team(tournament.id, session)
                    if first_reserve_team:
                        await AsyncOrm.transfer_team_from_reserve(first_reserve_team.team_id, session)

                        # TODO —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å message
                        date = utils.convert_date(tournament.date)
                        time = utils.convert_time(tournament.date)
                        msg_for_users = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                                        f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{first_reserve_team.title}</b> –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ <b>–æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤</b> " \
                                        f"–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ {tournament.type} \"{tournament.title}\" {date} {time}\n\n" \
                                        f"–ö–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n\n" \
                                        f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"

                        # –æ–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
                        for user in first_reserve_team.users:
                            try:
                                await bot.send_message(user.tg_id, msg_for_users)
                            except:
                                pass


async def update_events(bot: aiogram.Bot, session: Any):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏–≥—Ä –∏ —Ç–¥.)
    events = await AsyncOrm.get_events()
    for event in events:
        # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–±—ã—Ç–∏—è
        # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–±—ã—Ç–∏—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —á–µ—Ä–µ–∑ 1 —á –ø–æ—Å–ª–µ –µ–≥–æ –Ω–∞—á–∞–ª–∞
        if datetime.datetime.now(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=1) > \
                event.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):
            await AsyncOrm.update_event_status_to_false(event.id)

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π —Ä–µ–∑–µ—Ä–≤–∞, –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            reserve_users = await AsyncOrm.get_reserved_users_by_event_id(event.id)
            if reserve_users:
                date = utils.convert_date(event.date)
                time = utils.convert_time(event.date)
                msg_for_admin = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ —Å–ª–µ–¥—É—é—â–∏–º <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞</b> " \
                      f"–Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.type} \"{event.title}\" {date} –≤ {time}:\n\n"
                for user in reserve_users:
                    msg_for_admin += f"<a href='tg://user?id={user.user.tg_id}'>{user.user.firstname} {user.user.lastname}</a> - {event.price} —Ä—É–±.\n"

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                try:
                    await bot.send_message(settings.main_admin_tg_id, msg_for_admin)
                except:
                    pass

    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
    tournaments: list[Tournament] = await AsyncOrm.get_all_tournaments(1, session)

    for tournament in tournaments:
        # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–±—ã—Ç–∏—è
        # –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–±—ã—Ç–∏—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —á–µ—Ä–µ–∑ 1 —á –ø–æ—Å–ª–µ –µ–≥–æ –Ω–∞—á–∞–ª–∞
        if datetime.datetime.now(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=1) > \
                tournament.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):
            await AsyncOrm.update_tournament_status_to_false(tournament.id, session)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –Ω–∞ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
            teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament.id, session)
            reserve_teams: list[TeamUsers] = []
            for team in teams:
                if team.reserve:
                    reserve_teams.append(team)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–ø–∏—Å–æ–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
            if reserve_teams:
                date = utils.convert_date(tournament.date)
                time = utils.convert_time(tournament.date)

                msg_for_admin = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–ø–∏—Ç–∞–Ω–∞–º <b>–∫–æ–º–∞–Ω–¥ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞</b> " \
                                f"—Å —Ç—É—Ä–Ω–∏—Ä–∞ {tournament.type} \"{tournament.title}\" {date} –≤ {time}:\n\n"

                for team in reserve_teams:
                    team_leader: User = await AsyncOrm.get_user_by_id(team.team_leader_id)
                    msg_for_admin += f"<a href='tg://user?id={team_leader.tg_id}'>{team_leader.firstname} {team_leader.lastname}</a> " \
                                     f"(–∫–æ–º–∞–Ω–¥–∞ <b>{team.title}</b>) - {tournament.price} —Ä—É–±.\n"

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                try:
                    await bot.send_message(settings.main_admin_tg_id, msg_for_admin)
                except:
                    pass


async def notify_users_about_events(bot: aiogram.Bot, session: Any):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Å–æ–±—ã—Ç–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å (–∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è)"""
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    events = await AsyncOrm.get_events_with_users()

    for event in events:
        if (datetime.datetime.now(tz=pytz.timezone("Europe/Moscow")) + datetime.timedelta(days=1)).date() == event.date.date():
            for user in event.users_registered:
                try:
                    msg = ms.notify_message(event)
                    await bot.send_message(user.tg_id, msg)
                except:
                    pass

    # –î–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
    tournaments: list[Tournament] = await AsyncOrm.get_all_tournaments(10, session)
    for tournament in tournaments:
        if (datetime.datetime.now(tz=pytz.timezone("Europe/Moscow")) + datetime.timedelta(days=1)).date() == tournament.date.date():
            teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament.id, session)

            for team in teams:
                if not team.reserve:
                    for user in team.users:
                        try:
                            msg = ms.notify_tournament_message(tournament)
                            await bot.send_message(user.tg_id, msg)
                        except:
                            pass


async def delete_old_events(session: Any):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±–æ–ª–µ–µ settings.expire_event_days –¥–Ω–µ–π –Ω–∞–∑–∞–¥"""
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    await AsyncOrm.delete_old_events(settings.expire_event_days)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
    await AsyncOrm.delete_old_tournaments(settings.expire_event_days, session)


async def check_team_payment_for_tournament(session: Any, bot: aiogram.Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞"""
    tournaments: list[Tournament] = await AsyncOrm.get_all_tournaments(10, session)
    now = datetime.datetime.now(tz=pytz.timezone("Europe/Moscow"))

    for tournament in tournaments:

        # –ó–∞ 5 –¥–Ω–µ–π –¥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç–∏–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ–ø–æ–≤–µ—â–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
        if now + datetime.timedelta(days=settings.notify_about_payment_days) > \
                tournament.date.astimezone(tz=pytz.timezone("Europe/Moscow")) - datetime.timedelta(hours=3):

                teams: list[TeamUsers] = await AsyncOrm.get_teams_with_users(tournament.id, session)

                for team in teams:
                    payment = await AsyncOrm.get_tournament_payment_by_team_id(team.team_id, session)

                    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –µ—â–µ –Ω–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤ —Ä–µ–∑–µ—Ä–≤–µ
                    if not payment or (not team.reserve and not payment.paid_confirm):
                        captain: User = await AsyncOrm.get_user_by_id(team.team_leader_id)
                        date = utils.convert_date(tournament.date)
                        time = utils.convert_time(tournament.date)
                        msg_for_captain = f"üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" \
                                          f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{team.title}</b> –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∞ –æ–ø–ª–∞—Ç—É –∑–∞ —Ç—É—Ä–Ω–∏—Ä {tournament.type} " \
                                          f"\"{tournament.title}\" {date} {time}\n\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è, " \
                                          f"–∏–Ω–∞—á–µ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞\n\n" \
                                          f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{settings.main_admin_url}"

                        try:
                            await bot.send_message(captain.tg_id, msg_for_captain)
                        except:
                            pass


async def create_players_excel():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–≥—Ä–æ–∫–∞–º–∏"""
    users = await AsyncOrm.get_all_players_info()
    await write_excel_file(users)
