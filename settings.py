from pydantic_settings import BaseSettings, SettingsConfigDict


LEVELS = {
    1: "–ù–æ–≤–∏—á–æ–∫",
    2: "üèê –ù–æ–≤–∏—á–æ–∫+",
    3: "ü•â –õ–∞–π—Ç",
    4: "ü•à –õ–∞–π—Ç+",
    5: "ü•á –õ–∞–π—Ç++",
    6: "üèÖ –ú–µ–¥–∏—É–º",
    7: "üèÜ –•–∞—Ä–¥",
}

TOURNAMENT_POINTS = {
    4: ("ü•â –ù–æ–≤–∏—á–æ–∫+/–õ–∞–π—Ç", 16),
    5: ("ü•à –õ–∞–π—Ç/–õ–∞–π—Ç+", 22),
    6: ("ü•á –õ–∞–π—Ç+/–õ–∞–π—Ç++", 32),
}

# LEVEL:POINTS
USER_POINTS = {
    "male": {
        1: 1,
        2: 1,
        3: 3,
        4: 4,
        5: 6,
        6: 7,
        7: 8,
    },
    "female": {
        1: 1,
        2: 1,
        3: 1,
        4: 2,
        5: 2,
        6: 3,
        7: 4,
    }
}

WEEKDAYS = {
    0: "–ü–Ω",
    1: "–í—Ç",
    2: "–°—Ä",
    3: "–ß—Ç",
    4: "–ü—Ç",
    5: "–°–±",
    6: "–í—Å",
}


class Database(BaseSettings):
    postgres_user: str
    postgres_password: str
    postgres_db: str
    postgres_host: str
    postgres_port: str

    @property
    def DATABASE_URL(self):
        return f"postgresql+asyncpg://{self.postgres_user}:{self.postgres_password}@{self.postgres_host}:{self.postgres_port}/{self.postgres_db}"

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")


class Settings(BaseSettings):
    bot_token: str
    admins: list
    main_admin_url: str
    main_admin_tg_id: str
    levels: dict = LEVELS
    weekdays: dict = WEEKDAYS
    tournament_points: dict = TOURNAMENT_POINTS
    user_points: dict = USER_POINTS
    expire_event_days: int = 14
    admin_phone: str
    support_contact: str
    address: str = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ò–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∏–π –ø–µ—Ä., 5–ù"
    notify_about_payment_days: int = 5
    kick_team_without_pay_days: int = 4
    db: Database = Database()

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")


settings = Settings()

